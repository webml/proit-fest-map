import { useState } from "react";
import {
  NextUIProvider,
  Modal,
  Text,
  Button,
  Card,
  styled,
  Link,
} from "@nextui-org/react";
import { Map } from "./components/Map";
import { ProgramList } from "./components/ProgramList";

import styles from "./App.module.css";

import data from "./data/data";

function App() {
  const [isVisible, setIsVisible] = useState(false);
  const [isVisibleAbout, setIsVisibleAbout] = useState(false);
  const [isVisibleError, setVisibleError] = useState(false);
  const [element, setElement] = useState(data.scene);
  const [listTitle, setListTitle] = useState("");

  const today = new Date();

  const getClickID = (event) => {
    const elementID = event.target.getAttribute("id");

    if (elementID === null) return;

    if (elementID.substr(0, 6) === "toilet") return;

    setElement(data[elementID]);

    const titles = [];
    data[elementID].map((lec) =>
      titles.includes(lec.section) ? "" : titles.push(lec.section)
    );

    titles.length === 1
      ? setListTitle(titles[0])
      : (today.getDate = 6 ? setListTitle(titles[0]) : setListTitle(titles[1]));

    setIsVisible(true);
  };

  const myListHandleClick = () => {
    const myLections = JSON.parse(localStorage.getItem("myLections"));

    const sortLection = myLections.sort(
      (a, b) => new Date(a.start) - new Date(b.start)
    );

    console.log(sortLection);

    if (sortLection === null) {
      return setVisibleError(true);
    } else if (myLections.length === 0) {
      return setVisibleError(true);
    } else {
      setListTitle("–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ—Å–µ—Ç–∏—Ç—å");
      setElement(sortLection);

      setIsVisible(true);
    }
  };

  const aboutHandelPress = () => {
    window.open("https://t.me/lumek", "_blank");
  };

  const getNowLections = () => {
    const now = [];

    for (let i = 0; i < Object.keys(data).length; i++) {
      data[Object.keys(data)[i]].map(
        (lec) =>
          lec.finish.getTime() > today &&
          lec.start.getTime() < today &&
          now.push(
            <Text
              className={styled.text}
            >{`${lec.section}: ${lec.title}`}</Text>
          )
      );
    }
    return now;
  };

  return (
    <NextUIProvider>
      <div className={styles.app}>
        <Map onClick={getClickID} />
        <Button
          color="gradient"
          className={styles.aboutButton}
          auto
          onPress={() => setIsVisibleAbout(true)}
        >
          –û –∫–∞—Ä—Ç–µ
        </Button>
        <Button
          color="primary"
          className={styles.myListButton}
          auto
          onPress={myListHandleClick}
        >
          –ü–ª–∞–Ω–∏—Ä—É—é –ø–æ—Å–µ—Ç–∏—Ç—å
        </Button>
        <Card className={styles.marquee}>
          <Card.Header>
            <Text size={12} b>
              –°–µ–π—á–∞—Å –∏–¥–µ—Ç
            </Text>
          </Card.Header>
          <Card.Body className={styles.container}>
            <div className={styles.bMarq}>
              <div className={styles.bMarqText}>
                <div className={styles.bMarqC}>{getNowLections()}</div>
              </div>
            </div>
          </Card.Body>
        </Card>
        <Modal
          fullScreen
          closeButton
          aria-labelledby={element}
          open={isVisible}
          onClose={() => setIsVisible(false)}
        >
          <Modal.Header>
            <Text h3 id="modal-title" size={18}>
              {listTitle}
            </Text>
          </Modal.Header>
          <Modal.Body className={styles.modal}>
            <ProgramList
              element={element}
              updateState={setElement}
              listTitle={listTitle}
            />
          </Modal.Body>
        </Modal>
        <Modal
          closeButton
          aria-labelledby="aboutMe"
          open={isVisibleAbout}
          onClose={() => setIsVisibleAbout(false)}
        >
          <Text h3 id="about-title" size={18}>
            –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
          </Text>
          <Modal.Body>
            <Text>
              –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∏—Ö–∞–∏–ª, —è¬†–ø—Ä–∏–¥—É–º–∞–ª –∏¬†—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª —ç—Ç—É –∫–∞—Ä—Ç—É
              –∑–∞¬†–ø–∞—Ä—É –¥–Ω–µ–π –¥–æ¬†—Ñ–µ—Å—Ç–∞, —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å –≤–∞—à—É –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏¬†–≤—ã¬†–º–æ–≥–ª–∏
              —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–π.
            </Text>
            <Text>
              –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏–¥–µ—è –ø—Ä–∏—à–ª–∞ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ. –ü–æ—ç—Ç–æ–º—É —è¬†–Ω–µ¬†—É—Å–ø–µ–ª
              —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ¬†–∑–∞–¥—É–º–∞–Ω–Ω–æ–µ üòÖ
            </Text>
            <Text>
              –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –º–æ—è¬†—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏¬†–≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å
              —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî¬†–ø–∏—à–∏—Ç–µ –≤¬†—Ç–µ–ª–µ–≥—Ä–∞–º
            </Text>
            <Button onPress={aboutHandelPress} color="primary">
              –ù–∞–ø–∏—Å–∞—Ç—å
            </Button>
          </Modal.Body>
        </Modal>
        <Modal
          closeButton
          aria-labelledby="user-list"
          open={isVisibleError}
          onClose={() => setVisibleError(false)}
        >
          <Modal.Header>
            <Text h3 id="about-title" size={18}>
              –í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ª–µ–∫—Ü–∏–∏, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏
            </Text>
          </Modal.Header>
          <Modal.Body>
            <Text>
              –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å —Å–µ–∫—Ü–∏–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ
              –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –ª–µ–∫—Ü–∏–∏
            </Text>
          </Modal.Body>
          <Modal.Footer>
            <Button auto onPress={() => setVisibleError(false)}>
              –ü–æ–Ω—è–ª
            </Button>
          </Modal.Footer>
        </Modal>
      </div>
    </NextUIProvider>
  );
}

export default App;
